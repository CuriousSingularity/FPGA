-- -------------------------------------------------------------
-- 
-- File Name: Streaming_VHDL\fil_videosharp_sim\Aligned_to_Second_Pulse.vhd
-- Created: 2019-06-18 09:45:08
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Aligned_to_Second_Pulse
-- Source Path: fil_videosharp_sim/Streaming 2-D FIR Filter/Line Memory/Line Memory Controller/Read Control/Aligned 
-- to Second Puls
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Aligned_to_Second_Pulse IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        earlyPulse                        :   IN    std_logic;
        latePulse                         :   IN    std_logic;
        out_rsvd                          :   OUT   std_logic
        );
END Aligned_to_Second_Pulse;


ARCHITECTURE rtl OF Aligned_to_Second_Pulse IS

  -- Signals
  SIGNAL early_pulse_reg                  : std_logic;
  SIGNAL early_pulse_reg_next             : std_logic;

BEGIN
  Aligned_to_Second_Pulse_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      early_pulse_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        early_pulse_reg <= early_pulse_reg_next;
      END IF;
    END IF;
  END PROCESS Aligned_to_Second_Pulse_1_process;

  Aligned_to_Second_Pulse_1_output : PROCESS (earlyPulse, early_pulse_reg, latePulse)
  BEGIN
    early_pulse_reg_next <= early_pulse_reg;
    out_rsvd <= (early_pulse_reg OR earlyPulse) AND latePulse;
    IF (earlyPulse AND ( NOT latePulse)) = '1' THEN 
      early_pulse_reg_next <= '1';
    ELSIF ((early_pulse_reg OR earlyPulse) AND latePulse) = '1' THEN 
      early_pulse_reg_next <= '0';
    END IF;
  END PROCESS Aligned_to_Second_Pulse_1_output;


END rtl;

