-- -------------------------------------------------------------
-- 
-- File Name: Streaming_VHDL\fil_videosharp_sim\Time_Distance_block.vhd
-- Created: 2019-06-18 09:45:08
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Time_Distance_block
-- Source Path: fil_videosharp_sim/Streaming 2-D FIR Filter/Line Memory/Line Memory Controller/Read Control/Time 
-- Distanc
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Time_Distance_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        repeat                            :   IN    std_logic;
        newLine                           :   IN    std_logic;
        currentDistance                   :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
        lastDistance                      :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
        );
END Time_Distance_block;


ARCHITECTURE rtl OF Time_Distance_block IS

  -- Component Declarations
  COMPONENT Time_Distance
    PORT( inputPulse                      :   IN    std_logic;
          repeatPulse                     :   IN    std_logic;
          fromDistCounter                 :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          fromLastDist                    :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          toDistCounter                   :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          toLastDist                      :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Time_Distance
    USE ENTITY work.Time_Distance(rtl);

  -- Signals
  SIGNAL toLastDist                       : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL toLastDist_unsigned              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Unit_Delay1_out1                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Unit_Delay7_out1                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL toDistCounter                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL toDistCounter_unsigned           : unsigned(8 DOWNTO 0);  -- ufix9

BEGIN
  u_Time_Distance : Time_Distance
    PORT MAP( inputPulse => newLine,
              repeatPulse => repeat,
              fromDistCounter => std_logic_vector(Unit_Delay7_out1),  -- ufix9
              fromLastDist => std_logic_vector(Unit_Delay1_out1),  -- ufix9
              toDistCounter => toDistCounter,  -- ufix9
              toLastDist => toLastDist  -- ufix9
              );

  toLastDist_unsigned <= unsigned(toLastDist);

  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay1_out1 <= toLastDist_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  toDistCounter_unsigned <= unsigned(toDistCounter);

  Unit_Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay7_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay7_out1 <= toDistCounter_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay7_process;


  currentDistance <= std_logic_vector(Unit_Delay7_out1);

  lastDistance <= std_logic_vector(Unit_Delay1_out1);

END rtl;

