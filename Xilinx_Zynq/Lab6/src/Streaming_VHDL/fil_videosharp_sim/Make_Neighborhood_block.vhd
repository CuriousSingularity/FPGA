-- -------------------------------------------------------------
-- 
-- File Name: Streaming_VHDL\fil_videosharp_sim\Make_Neighborhood_block.vhd
-- Created: 2019-06-18 09:45:08
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Make_Neighborhood_block
-- Source Path: fil_videosharp_sim/Streaming 2-D FIR Filter/Make Neighborhood
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Streaming_2_D_FIR_Filter_pkg.ALL;

ENTITY Make_Neighborhood_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        syncIn                            :   IN    std_logic_vector(0 TO 4);  -- boolean [5]
        colIndexIn                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        rowIndexIn                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        frameSize                         :   IN    vector_of_std_logic_vector16(0 TO 1);  -- uint16 [2]
        dataOut                           :   OUT   vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
        syncOut                           :   OUT   std_logic_vector(0 TO 4)  -- boolean [5]
        );
END Make_Neighborhood_block;


ARCHITECTURE rtl OF Make_Neighborhood_block IS

  -- Component Declarations
  COMPONENT Make_Neighborhood
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          columnIn                        :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          colIndex                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          rowIndex                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          frameSize                       :   IN    vector_of_std_logic_vector16(0 TO 1);  -- uint16 [2]
          activePixel                     :   IN    std_logic;
          y                               :   OUT   vector_of_std_logic_vector8(0 TO 8)  -- uint8 [9]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Make_Neighborhood
    USE ENTITY work.Make_Neighborhood(rtl);

  -- Signals
  SIGNAL dataIn_unsigned                  : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL colIndexIn_unsigned              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL rowIndexIn_unsigned              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL frameSize_unsigned               : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Unit_Delay_out1                  : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL Unit_Delay_out1_1                : vector_of_std_logic_vector8(0 TO 2);  -- ufix8 [3]
  SIGNAL Unit_Delay2_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Unit_Delay3_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Unit_Delay4_out1                 : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Unit_Delay4_out1_1               : vector_of_std_logic_vector16(0 TO 1);  -- ufix16 [2]
  SIGNAL vin                              : std_logic;
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL y                                : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL Unit_Delay6_out1                 : std_logic_vector(0 TO 4);  -- boolean [5]
  SIGNAL Integer_Delay_out1               : std_logic_vector(0 TO 4);  -- boolean [5]

BEGIN
  u_Make_Neighborhood : Make_Neighborhood
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              columnIn => Unit_Delay_out1_1,  -- uint8 [3]
              colIndex => std_logic_vector(Unit_Delay2_out1),  -- uint8
              rowIndex => std_logic_vector(Unit_Delay3_out1),  -- uint8
              frameSize => Unit_Delay4_out1_1,  -- uint16 [2]
              activePixel => Unit_Delay1_out1,
              y => y  -- uint8 [9]
              );

  outputgen3: FOR k IN 0 TO 2 GENERATE
    dataIn_unsigned(k) <= unsigned(dataIn(k));
  END GENERATE;

  colIndexIn_unsigned <= unsigned(colIndexIn);

  rowIndexIn_unsigned <= unsigned(rowIndexIn);

  outputgen2: FOR k IN 0 TO 1 GENERATE
    frameSize_unsigned(k) <= unsigned(frameSize(k));
  END GENERATE;

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= dataIn_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  outputgen1: FOR k IN 0 TO 2 GENERATE
    Unit_Delay_out1_1(k) <= std_logic_vector(Unit_Delay_out1(k));
  END GENERATE;

  Unit_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay2_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay2_out1 <= colIndexIn_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  Unit_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay3_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay3_out1 <= rowIndexIn_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_process;


  Unit_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay4_out1 <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay4_out1 <= frameSize_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_process;


  outputgen: FOR k IN 0 TO 1 GENERATE
    Unit_Delay4_out1_1(k) <= std_logic_vector(Unit_Delay4_out1(k));
  END GENERATE;

  vin <= syncIn(0);

  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay1_out1 <= vin;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  Unit_Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay6_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay6_out1 <= syncIn;
      END IF;
    END IF;
  END PROCESS Unit_Delay6_process;


  Integer_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay_out1 <= Unit_Delay6_out1;
      END IF;
    END IF;
  END PROCESS Integer_Delay_process;


  dataOut <= y;

  syncOut <= Integer_Delay_out1;

END rtl;

