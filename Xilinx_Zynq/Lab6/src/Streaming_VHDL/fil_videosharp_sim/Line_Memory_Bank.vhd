-- -------------------------------------------------------------
-- 
-- File Name: Streaming_VHDL\fil_videosharp_sim\Line_Memory_Bank.vhd
-- Created: 2019-06-18 09:45:08
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Line_Memory_Bank
-- Source Path: fil_videosharp_sim/Streaming 2-D FIR Filter/Line Memory/Line Memory Bank
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Streaming_2_D_FIR_Filter_pkg.ALL;

ENTITY Line_Memory_Bank IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        writeValidIn                      :   IN    std_logic;
        writeColumnIndex                  :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        writeLineMemoryIndex              :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        readColumnInex                    :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        readLineIndices                   :   IN    std_logic_vector(0 TO 1);  -- ufix1 [2]
        latestPixel                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        dataOut                           :   OUT   vector_of_std_logic_vector8(0 TO 2)  -- uint8 [3]
        );
END Line_Memory_Bank;


ARCHITECTURE rtl OF Line_Memory_Bank IS

  -- Component Declarations
  COMPONENT decoder
    PORT( selectWriteLine                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          writeValid                      :   IN    std_logic;
          y                               :   OUT   std_logic_vector(0 TO 1)  -- ufix1 [2]
          );
  END COMPONENT;

  COMPONENT RAM_Blocks
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          writeAdd                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          selectWriteRAM                  :   IN    std_logic_vector(0 TO 1);  -- ufix1 [2]
          readAdd                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          dataOut                         :   OUT   vector_of_std_logic_vector8(0 TO 1)  -- uint8 [2]
          );
  END COMPONENT;

  COMPONENT Line_Selector
    PORT( selectReadLine                  :   IN    std_logic_vector(0 TO 1);  -- ufix1 [2]
          inputLines                      :   IN    vector_of_std_logic_vector8(0 TO 1);  -- uint8 [2]
          latestPixel                     :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          y                               :   OUT   vector_of_std_logic_vector8(0 TO 2)  -- uint8 [3]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : decoder
    USE ENTITY work.decoder(rtl);

  FOR ALL : RAM_Blocks
    USE ENTITY work.RAM_Blocks(rtl);

  FOR ALL : Line_Selector
    USE ENTITY work.Line_Selector(rtl);

  -- Signals
  SIGNAL Unit_Delay4_out1                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL y                                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL latestPixel_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL RAM_Blocks_out1                  : vector_of_std_logic_vector8(0 TO 1);  -- ufix8 [2]
  SIGNAL Unit_Delay1_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y_1                              : vector_of_std_logic_vector8(0 TO 2);  -- ufix8 [3]

BEGIN
  u_decoder : decoder
    PORT MAP( selectWriteLine => writeLineMemoryIndex,  -- ufix2
              writeValid => writeValidIn,
              y => y  -- ufix1 [2]
              );

  u_RAM_Blocks : RAM_Blocks
    PORT MAP( clk => clk,
              enb => enb,
              dataIn => dataIn,  -- uint8
              writeAdd => writeColumnIndex,  -- uint8
              selectWriteRAM => y,  -- ufix1 [2]
              readAdd => readColumnInex,  -- uint8
              dataOut => RAM_Blocks_out1  -- uint8 [2]
              );

  u_Line_Selector : Line_Selector
    PORT MAP( selectReadLine => Unit_Delay4_out1,  -- ufix1 [2]
              inputLines => RAM_Blocks_out1,  -- uint8 [2]
              latestPixel => std_logic_vector(Unit_Delay1_out1),  -- uint8
              y => y_1  -- uint8 [3]
              );

  Unit_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay4_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay4_out1 <= readLineIndices;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_process;


  latestPixel_unsigned <= unsigned(latestPixel);

  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay1_out1 <= latestPixel_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  dataOut <= y_1;

END rtl;

