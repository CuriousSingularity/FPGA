-- -------------------------------------------------------------
-- 
-- File Name: Streaming_VHDL\fil_videosharp_sim\Line_Memory_Controller.vhd
-- Created: 2019-06-18 09:45:08
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Line_Memory_Controller
-- Source Path: fil_videosharp_sim/Streaming 2-D FIR Filter/Line Memory/Line Memory Controller
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Streaming_2_D_FIR_Filter_pkg.ALL;

ENTITY Line_Memory_Controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        activePixel                       :   IN    std_logic;
        newLine                           :   IN    std_logic;
        newFrame                          :   IN    std_logic;
        frameEnd                          :   IN    std_logic;
        frameSize                         :   IN    vector_of_std_logic_vector16(0 TO 1);  -- uint16 [2]
        writeData                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        writeDataValid                    :   OUT   std_logic;
        writeColIndex                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        writeLineIndex                    :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        readColIndex                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        readLineIndices                   :   OUT   std_logic_vector(0 TO 1);  -- ufix1 [2]
        latestPixelValue                  :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        syncOut                           :   OUT   std_logic_vector(0 TO 4);  -- boolean [5]
        outRowIndex                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Line_Memory_Controller;


ARCHITECTURE rtl OF Line_Memory_Controller IS

  -- Component Declarations
  COMPONENT Write_Col_Counter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable                          :   IN    std_logic;
          reload                          :   IN    std_logic;
          count                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Write_Line_Counter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable                          :   IN    std_logic;
          reload                          :   IN    std_logic;
          count                           :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT Initial_Line_Skip
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable                          :   IN    std_logic;
          reload                          :   IN    std_logic;
          count                           :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT Detect_Valid
    PORT( validIn                         :   IN    std_logic;
          initSkipCounter                 :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          repeatLineValid                 :   IN    std_logic;
          initLineCount                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          initLinesSkipped                :   OUT   std_logic;
          valid                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Read_Control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          initialLineCount                :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          initLineSkipped                 :   IN    std_logic;
          frameWidth                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          frameEnd                        :   IN    std_logic;
          newLine                         :   IN    std_logic;
          dataValidIn                     :   IN    std_logic;
          holdValid                       :   OUT   std_logic;
          readLineEnb                     :   OUT   std_logic;
          readLineReload                  :   OUT   std_logic;
          readColEnb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Read_Col_Counter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable                          :   IN    std_logic;
          reload                          :   IN    std_logic;
          count                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Read_Line_Count
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable                          :   IN    std_logic;
          delayedReload                   :   IN    std_logic;
          loadVal                         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          count                           :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT Select_All_Output_Rows
    PORT( readLineCount                   :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          y                               :   OUT   std_logic_vector(0 TO 1)  -- ufix1 [2]
          );
  END COMPONENT;

  COMPONENT Out_Row_Count
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable                          :   IN    std_logic;
          reload                          :   IN    std_logic;
          count                           :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Adjust_Sync_Signals
    PORT( dataValidOut                    :   IN    std_logic;
          frameWidth                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          frameHeight                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          colIndex                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          rowIndex                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          syncOut                         :   OUT   std_logic_vector(0 TO 4)  -- boolean [5]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Write_Col_Counter
    USE ENTITY work.Write_Col_Counter(rtl);

  FOR ALL : Write_Line_Counter
    USE ENTITY work.Write_Line_Counter(rtl);

  FOR ALL : Initial_Line_Skip
    USE ENTITY work.Initial_Line_Skip(rtl);

  FOR ALL : Detect_Valid
    USE ENTITY work.Detect_Valid(rtl);

  FOR ALL : Read_Control
    USE ENTITY work.Read_Control(rtl);

  FOR ALL : Read_Col_Counter
    USE ENTITY work.Read_Col_Counter(rtl);

  FOR ALL : Read_Line_Count
    USE ENTITY work.Read_Line_Count(rtl);

  FOR ALL : Select_All_Output_Rows
    USE ENTITY work.Select_All_Output_Rows(rtl);

  FOR ALL : Out_Row_Count
    USE ENTITY work.Out_Row_Count(rtl);

  FOR ALL : Adjust_Sync_Signals
    USE ENTITY work.Adjust_Sync_Signals(rtl);

  -- Signals
  SIGNAL DV                               : std_logic;
  SIGNAL NL                               : std_logic;
  SIGNAL dataIn_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL last_pix                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL wdata                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL DV_1                             : std_logic;
  SIGNAL DV_2                             : std_logic;
  SIGNAL wcol                             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL wcol_unsigned                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Unit_Delay13_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL wrow                             : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL wrow_unsigned                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Unit_Delay1_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL init_cnt                         : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL hv                               : std_logic;
  SIGNAL rlv                              : std_logic;
  SIGNAL LSkp                             : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL Detect_Valid_out2                : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL rp                               : std_logic;
  SIGNAL rlr                              : std_logic;
  SIGNAL Read_Control_out4                : std_logic;
  SIGNAL rcol                             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL rlc                              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL y                                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL FW                               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL FW_1                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL FH                               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL FH_1                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Out_Row_Count_out1               : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Adjust_Sync_Signals_out1         : std_logic_vector(0 TO 4);  -- boolean [5]
  SIGNAL wv                               : std_logic;
  SIGNAL idv                              : std_logic;

BEGIN
  -- index of last X lines

  u_Write_Col_Counter : Write_Col_Counter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enable => DV,
              reload => NL,
              count => wcol  -- uint8
              );

  u_Write_Line_Counter : Write_Line_Counter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enable => NL,
              reload => Constant1_out1,
              count => wrow  -- ufix2
              );

  u_Initial_Line_Skip : Initial_Line_Skip
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enable => NL,
              reload => newFrame,
              count => init_cnt  -- ufix2
              );

  u_Detect_Valid : Detect_Valid
    PORT MAP( validIn => DV_1,
              initSkipCounter => init_cnt,  -- ufix2
              repeatLineValid => rlv,
              initLineCount => LSkp,  -- ufix2
              initLinesSkipped => Detect_Valid_out2,
              valid => valid
              );

  u_Read_Control : Read_Control
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              initialLineCount => LSkp,  -- ufix2
              initLineSkipped => Detect_Valid_out2,
              frameWidth => frameSize(1),  -- uint16
              frameEnd => frameEnd,
              newLine => NL,
              dataValidIn => DV,
              holdValid => hv,
              readLineEnb => rp,
              readLineReload => rlr,
              readColEnb => Read_Control_out4
              );

  u_Read_Col_Counter : Read_Col_Counter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enable => Read_Control_out4,
              reload => rp,
              count => rcol  -- uint8
              );

  u_Read_Line_Count : Read_Line_Count
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enable => rp,
              delayedReload => rlr,
              loadVal => wrow,  -- ufix2
              count => rlc  -- ufix2
              );

  u_Select_All_Output_Rows : Select_All_Output_Rows
    PORT MAP( readLineCount => rlc,  -- ufix2
              y => y  -- ufix1 [2]
              );

  u_Out_Row_Count : Out_Row_Count
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enable => rp,
              reload => rlr,
              count => Out_Row_Count_out1  -- uint8
              );

  u_Adjust_Sync_Signals : Adjust_Sync_Signals
    PORT MAP( dataValidOut => valid,
              frameWidth => std_logic_vector(FW_1),  -- uint16
              frameHeight => std_logic_vector(FH_1),  -- uint16
              colIndex => rcol,  -- uint8
              rowIndex => Out_Row_Count_out1,  -- uint8
              syncOut => Adjust_Sync_Signals_out1  -- boolean [5]
              );

  DV <= activePixel;

  NL <= newLine;

  dataIn_unsigned <= unsigned(dataIn);

  Unit_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      last_pix <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        last_pix <= dataIn_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay5_process;


  Unit_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wdata <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wdata <= last_pix;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_process;


  writeData <= std_logic_vector(wdata);

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DV_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        DV_1 <= DV;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DV_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        DV_2 <= DV_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  wcol_unsigned <= unsigned(wcol);

  Unit_Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay13_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay13_out1 <= wcol_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay13_process;


  writeColIndex <= std_logic_vector(Unit_Delay13_out1);

  Constant1_out1 <= '0';

  wrow_unsigned <= unsigned(wrow);

  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay1_out1 <= wrow_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  writeLineIndex <= std_logic_vector(Unit_Delay1_out1);

  Unit_Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rlv <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rlv <= hv;
      END IF;
    END IF;
  END PROCESS Unit_Delay7_process;


  latestPixelValue <= std_logic_vector(last_pix);

  FW <= unsigned(frameSize(1));

  Unit_Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      FW_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        FW_1 <= FW;
      END IF;
    END IF;
  END PROCESS Unit_Delay8_process;


  FH <= unsigned(frameSize(0));

  Unit_Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      FH_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        FH_1 <= FH;
      END IF;
    END IF;
  END PROCESS Unit_Delay9_process;


  writeDataValid <= DV_2;

  readColIndex <= rcol;

  readLineIndices <= y;

  syncOut <= Adjust_Sync_Signals_out1;

  outRowIndex <= Out_Row_Count_out1;

END rtl;

