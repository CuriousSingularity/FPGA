-- -------------------------------------------------------------
-- 
-- File Name: Streaming_VHDL\fil_videosharp_sim\Streaming_2_D_FIR_Filter.vhd
-- Created: 2019-06-18 09:45:08
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 9.86427e-07
-- Target subsystem base rate: 9.86427e-07
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        9.86427e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- syncOut                       ce_out        9.86427e-07
-- YOut                          ce_out        9.86427e-07
-- CbOut                         ce_out        9.86427e-07
-- CrOut                         ce_out        9.86427e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Streaming_2_D_FIR_Filter
-- Source Path: fil_videosharp_sim/Streaming 2-D FIR Filter
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Streaming_2_D_FIR_Filter_pkg.ALL;

ENTITY Streaming_2_D_FIR_Filter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        syncIn                            :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        YIn                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        CbIn                              :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        CrIn                              :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        syncOut                           :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix5
        YOut                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        CbOut                             :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        CrOut                             :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Streaming_2_D_FIR_Filter;


ARCHITECTURE rtl OF Streaming_2_D_FIR_Filter IS

  -- Component Declarations
  COMPONENT Line_Memory
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          syncIn                          :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          frameSize                       :   IN    vector_of_std_logic_vector16(0 TO 1);  -- uint16 [2]
          dataOut                         :   OUT   vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          syncOut                         :   OUT   std_logic_vector(0 TO 4);  -- boolean [5]
          colIndexOut                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          rowIndexOut                     :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Make_Neighborhood_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          syncIn                          :   IN    std_logic_vector(0 TO 4);  -- boolean [5]
          colIndexIn                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          rowIndexIn                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          frameSize                       :   IN    vector_of_std_logic_vector16(0 TO 1);  -- uint16 [2]
          dataOut                         :   OUT   vector_of_std_logic_vector8(0 TO 8);  -- uint8 [9]
          syncOut                         :   OUT   std_logic_vector(0 TO 4)  -- boolean [5]
          );
  END COMPONENT;

  COMPONENT Delay_balance
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Line_Memory
    USE ENTITY work.Line_Memory(rtl);

  FOR ALL : Make_Neighborhood_block
    USE ENTITY work.Make_Neighborhood_block(rtl);

  FOR ALL : Delay_balance
    USE ENTITY work.Delay_balance(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Frame_Size_out1                  : vector_of_unsigned16(0 TO 1);  -- uint16 [2]
  SIGNAL Frame_Size_out1_1                : vector_of_std_logic_vector16(0 TO 1);  -- ufix16 [2]
  SIGNAL y                                : vector_of_std_logic_vector8(0 TO 2);  -- ufix8 [3]
  SIGNAL Line_Memory_out2                 : std_logic_vector(0 TO 4);  -- boolean [5]
  SIGNAL cidx                             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Line_Memory_out4                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Frame_Size_out1_2                : vector_of_std_logic_vector16(0 TO 1);  -- ufix16 [2]
  SIGNAL operand                          : vector_of_std_logic_vector8(0 TO 8);  -- ufix8 [9]
  SIGNAL Make_Neighborhood_out2           : std_logic_vector(0 TO 4);  -- boolean [5]
  SIGNAL Make_Neighborhood_out2_0         : std_logic;
  SIGNAL Make_Neighborhood_out2_1         : std_logic;
  SIGNAL Make_Neighborhood_out2_2         : std_logic;
  SIGNAL Make_Neighborhood_out2_3         : std_logic;
  SIGNAL Make_Neighborhood_out2_4         : std_logic;
  SIGNAL Unit_Delay5_out_1                : std_logic;
  SIGNAL Unit_Delay5_1_reg                : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Unit_Delay5_out_2                : std_logic;
  SIGNAL Unit_Delay5_out_3                : std_logic;
  SIGNAL Unit_Delay5_out_4                : std_logic;
  SIGNAL Unit_Delay5_out_5                : std_logic;
  SIGNAL Unit_Delay5_1_reg_1              : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Unit_Delay5_1_reg_2              : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Unit_Delay5_1_reg_3              : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Unit_Delay5_1_reg_4              : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Unit_Delay5_out1                 : std_logic_vector(0 TO 4);  -- boolean [5]
  SIGNAL Gain_cast                        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Gain_cast_1                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Gain_cast_2                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Gain_cast_3                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Gain_out1                        : vector_of_unsigned5(0 TO 4);  -- ufix5 [5]
  SIGNAL Sum_of_Elements3_add_temp        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Sum_of_Elements3_add_temp_1      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Sum_of_Elements3_add_temp_2      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Sum_of_Elements3_out1            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL operand_unsigned                 : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Unit_Delay_out1                  : vector_of_unsigned8(0 TO 8);  -- uint8 [9]
  SIGNAL Filter_Coefficients_out1         : vector_of_signed16(0 TO 8);  -- sfix16_En12 [9]
  SIGNAL Product_cast                     : vector_of_signed9(0 TO 8);  -- sfix9 [9]
  SIGNAL Product_mul_temp                 : vector_of_signed25(0 TO 8);  -- sfix25_En12 [9]
  SIGNAL Product_out1                     : vector_of_signed24(0 TO 8);  -- sfix24_En12 [9]
  SIGNAL Unit_Delay2_out1                 : vector_of_signed24(0 TO 8);  -- sfix24_En12 [9]
  SIGNAL Sum_of_Elements_add_cast         : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_1       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_temp         : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_2       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_add_cast_3       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_4       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_temp_1       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_5       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_add_cast_6       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_7       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_temp_2       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_8       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_add_cast_9       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_10      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_temp_3       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_11      : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_add_cast_12      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_13      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_temp_4       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_14      : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_add_cast_15      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_16      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_temp_5       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_17      : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_add_cast_18      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_19      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_temp_6       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_20      : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_add_cast_21      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_cast_22      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_add_temp_7       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Sum_of_Elements_cast             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Sum_of_Elements_out1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Unit_Delay4_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_balance_out1               : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL CbIn_unsigned                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Unit_Delay10_reg                 : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Unit_Delay10_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL CrIn_unsigned                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Unit_Delay11_reg                 : vector_of_unsigned8(0 TO 2);  -- ufix8 [3]
  SIGNAL Unit_Delay11_out1                : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  u_Line_Memory : Line_Memory
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              dataIn => YIn,  -- uint8
              syncIn => syncIn,  -- ufix5
              frameSize => Frame_Size_out1_1,  -- uint16 [2]
              dataOut => y,  -- uint8 [3]
              syncOut => Line_Memory_out2,  -- boolean [5]
              colIndexOut => cidx,  -- uint8
              rowIndexOut => Line_Memory_out4  -- uint8
              );

  u_Make_Neighborhood : Make_Neighborhood_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              dataIn => y,  -- uint8 [3]
              syncIn => Line_Memory_out2,  -- boolean [5]
              colIndexIn => cidx,  -- uint8
              rowIndexIn => Line_Memory_out4,  -- uint8
              frameSize => Frame_Size_out1_2,  -- uint16 [2]
              dataOut => operand,  -- uint8 [9]
              syncOut => Make_Neighborhood_out2  -- boolean [5]
              );

  u_Delay_balance : Delay_balance
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => std_logic_vector(Unit_Delay4_out1),  -- uint8
              Out1 => Delay_balance_out1  -- uint8
              );

  Frame_Size_out1(0) <= to_unsigned(16#00B0#, 16);
  Frame_Size_out1(1) <= to_unsigned(16#00F0#, 16);

  outputgen2: FOR k IN 0 TO 1 GENERATE
    Frame_Size_out1_1(k) <= std_logic_vector(Frame_Size_out1(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 1 GENERATE
    Frame_Size_out1_2(k) <= std_logic_vector(Frame_Size_out1(k));
  END GENERATE;

  Make_Neighborhood_out2_0 <= Make_Neighborhood_out2(0);

  enb <= clk_enable;

  Unit_Delay5_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay5_1_reg <= (OTHERS => '0');
      Unit_Delay5_1_reg_1 <= (OTHERS => '0');
      Unit_Delay5_1_reg_2 <= (OTHERS => '0');
      Unit_Delay5_1_reg_3 <= (OTHERS => '0');
      Unit_Delay5_1_reg_4 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay5_1_reg(0) <= Make_Neighborhood_out2_0;
        Unit_Delay5_1_reg(1 TO 2) <= Unit_Delay5_1_reg(0 TO 1);
        Unit_Delay5_1_reg_1(0) <= Make_Neighborhood_out2_1;
        Unit_Delay5_1_reg_1(1 TO 2) <= Unit_Delay5_1_reg_1(0 TO 1);
        Unit_Delay5_1_reg_2(0) <= Make_Neighborhood_out2_2;
        Unit_Delay5_1_reg_2(1 TO 2) <= Unit_Delay5_1_reg_2(0 TO 1);
        Unit_Delay5_1_reg_3(0) <= Make_Neighborhood_out2_3;
        Unit_Delay5_1_reg_3(1 TO 2) <= Unit_Delay5_1_reg_3(0 TO 1);
        Unit_Delay5_1_reg_4(0) <= Make_Neighborhood_out2_4;
        Unit_Delay5_1_reg_4(1 TO 2) <= Unit_Delay5_1_reg_4(0 TO 1);
      END IF;
    END IF;
  END PROCESS Unit_Delay5_1_process;

  Unit_Delay5_out_1 <= Unit_Delay5_1_reg(2);
  Unit_Delay5_out_2 <= Unit_Delay5_1_reg_1(2);
  Unit_Delay5_out_3 <= Unit_Delay5_1_reg_2(2);
  Unit_Delay5_out_4 <= Unit_Delay5_1_reg_3(2);
  Unit_Delay5_out_5 <= Unit_Delay5_1_reg_4(2);

  Make_Neighborhood_out2_1 <= Make_Neighborhood_out2(1);

  Make_Neighborhood_out2_2 <= Make_Neighborhood_out2(2);

  Make_Neighborhood_out2_3 <= Make_Neighborhood_out2(3);

  Make_Neighborhood_out2_4 <= Make_Neighborhood_out2(4);

  Unit_Delay5_out1(0) <= Unit_Delay5_out_1;
  Unit_Delay5_out1(1) <= Unit_Delay5_out_2;
  Unit_Delay5_out1(2) <= Unit_Delay5_out_3;
  Unit_Delay5_out1(3) <= Unit_Delay5_out_4;
  Unit_Delay5_out1(4) <= Unit_Delay5_out_5;

  Gain_out1(0) <= '0' & '0' & '0' & '0' & Unit_Delay5_out1(0);
  Gain_cast <= resize(unsigned'(Unit_Delay5_out1(1) & '0'), 5);
  Gain_out1(1) <= Gain_cast;
  Gain_cast_1 <= resize(unsigned'(Unit_Delay5_out1(2) & '0' & '0'), 5);
  Gain_out1(2) <= Gain_cast_1;
  Gain_cast_2 <= resize(unsigned'(Unit_Delay5_out1(3) & '0' & '0' & '0'), 5);
  Gain_out1(3) <= Gain_cast_2;
  Gain_cast_3 <= unsigned'(Unit_Delay5_out1(4) & '0' & '0' & '0' & '0');
  Gain_out1(4) <= Gain_cast_3;

  Sum_of_Elements3_add_temp <= resize(Gain_out1(0), 8) + resize(Gain_out1(1), 8);
  Sum_of_Elements3_add_temp_1 <= Sum_of_Elements3_add_temp + resize(Gain_out1(2), 8);
  Sum_of_Elements3_add_temp_2 <= Sum_of_Elements3_add_temp_1 + resize(Gain_out1(3), 8);
  Sum_of_Elements3_out1 <= resize(Sum_of_Elements3_add_temp_2 + resize(Gain_out1(4), 8), 5);

  syncOut <= std_logic_vector(Sum_of_Elements3_out1);

  outputgen: FOR k IN 0 TO 8 GENERATE
    operand_unsigned(k) <= unsigned(operand(k));
  END GENERATE;

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= operand_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Filter_Coefficients_out1(0) <= to_signed(16#002E#, 16);
  Filter_Coefficients_out1(1) <= to_signed(16#0157#, 16);
  Filter_Coefficients_out1(2) <= to_signed(16#002E#, 16);
  Filter_Coefficients_out1(3) <= to_signed(16#0157#, 16);
  Filter_Coefficients_out1(4) <= to_signed(16#09E9#, 16);
  Filter_Coefficients_out1(5) <= to_signed(16#0157#, 16);
  Filter_Coefficients_out1(6) <= to_signed(16#002E#, 16);
  Filter_Coefficients_out1(7) <= to_signed(16#0157#, 16);
  Filter_Coefficients_out1(8) <= to_signed(16#002E#, 16);


  Product_out1_gen: FOR t_0 IN 0 TO 8 GENERATE
    Product_cast(t_0) <= signed(resize(Unit_Delay_out1(t_0), 9));
    Product_mul_temp(t_0) <= Product_cast(t_0) * Filter_Coefficients_out1(t_0);
    Product_out1(t_0) <= Product_mul_temp(t_0)(23 DOWNTO 0);
  END GENERATE Product_out1_gen;


  Unit_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay2_out1 <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay2_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  Sum_of_Elements_add_cast <= resize(Unit_Delay2_out1(0), 25);
  Sum_of_Elements_add_cast_1 <= resize(Unit_Delay2_out1(1), 25);
  Sum_of_Elements_add_temp <= Sum_of_Elements_add_cast + Sum_of_Elements_add_cast_1;
  
  Sum_of_Elements_add_cast_2 <= X"7FFFFF" WHEN (Sum_of_Elements_add_temp(24) = '0') AND (Sum_of_Elements_add_temp(23) /= '0') ELSE
      X"800000" WHEN (Sum_of_Elements_add_temp(24) = '1') AND (Sum_of_Elements_add_temp(23) /= '1') ELSE
      Sum_of_Elements_add_temp(23 DOWNTO 0);
  Sum_of_Elements_add_cast_3 <= resize(Sum_of_Elements_add_cast_2, 25);
  Sum_of_Elements_add_cast_4 <= resize(Unit_Delay2_out1(2), 25);
  Sum_of_Elements_add_temp_1 <= Sum_of_Elements_add_cast_3 + Sum_of_Elements_add_cast_4;
  
  Sum_of_Elements_add_cast_5 <= X"7FFFFF" WHEN (Sum_of_Elements_add_temp_1(24) = '0') AND (Sum_of_Elements_add_temp_1(23) /= '0') ELSE
      X"800000" WHEN (Sum_of_Elements_add_temp_1(24) = '1') AND (Sum_of_Elements_add_temp_1(23) /= '1') ELSE
      Sum_of_Elements_add_temp_1(23 DOWNTO 0);
  Sum_of_Elements_add_cast_6 <= resize(Sum_of_Elements_add_cast_5, 25);
  Sum_of_Elements_add_cast_7 <= resize(Unit_Delay2_out1(3), 25);
  Sum_of_Elements_add_temp_2 <= Sum_of_Elements_add_cast_6 + Sum_of_Elements_add_cast_7;
  
  Sum_of_Elements_add_cast_8 <= X"7FFFFF" WHEN (Sum_of_Elements_add_temp_2(24) = '0') AND (Sum_of_Elements_add_temp_2(23) /= '0') ELSE
      X"800000" WHEN (Sum_of_Elements_add_temp_2(24) = '1') AND (Sum_of_Elements_add_temp_2(23) /= '1') ELSE
      Sum_of_Elements_add_temp_2(23 DOWNTO 0);
  Sum_of_Elements_add_cast_9 <= resize(Sum_of_Elements_add_cast_8, 25);
  Sum_of_Elements_add_cast_10 <= resize(Unit_Delay2_out1(4), 25);
  Sum_of_Elements_add_temp_3 <= Sum_of_Elements_add_cast_9 + Sum_of_Elements_add_cast_10;
  
  Sum_of_Elements_add_cast_11 <= X"7FFFFF" WHEN (Sum_of_Elements_add_temp_3(24) = '0') AND (Sum_of_Elements_add_temp_3(23) /= '0') ELSE
      X"800000" WHEN (Sum_of_Elements_add_temp_3(24) = '1') AND (Sum_of_Elements_add_temp_3(23) /= '1') ELSE
      Sum_of_Elements_add_temp_3(23 DOWNTO 0);
  Sum_of_Elements_add_cast_12 <= resize(Sum_of_Elements_add_cast_11, 25);
  Sum_of_Elements_add_cast_13 <= resize(Unit_Delay2_out1(5), 25);
  Sum_of_Elements_add_temp_4 <= Sum_of_Elements_add_cast_12 + Sum_of_Elements_add_cast_13;
  
  Sum_of_Elements_add_cast_14 <= X"7FFFFF" WHEN (Sum_of_Elements_add_temp_4(24) = '0') AND (Sum_of_Elements_add_temp_4(23) /= '0') ELSE
      X"800000" WHEN (Sum_of_Elements_add_temp_4(24) = '1') AND (Sum_of_Elements_add_temp_4(23) /= '1') ELSE
      Sum_of_Elements_add_temp_4(23 DOWNTO 0);
  Sum_of_Elements_add_cast_15 <= resize(Sum_of_Elements_add_cast_14, 25);
  Sum_of_Elements_add_cast_16 <= resize(Unit_Delay2_out1(6), 25);
  Sum_of_Elements_add_temp_5 <= Sum_of_Elements_add_cast_15 + Sum_of_Elements_add_cast_16;
  
  Sum_of_Elements_add_cast_17 <= X"7FFFFF" WHEN (Sum_of_Elements_add_temp_5(24) = '0') AND (Sum_of_Elements_add_temp_5(23) /= '0') ELSE
      X"800000" WHEN (Sum_of_Elements_add_temp_5(24) = '1') AND (Sum_of_Elements_add_temp_5(23) /= '1') ELSE
      Sum_of_Elements_add_temp_5(23 DOWNTO 0);
  Sum_of_Elements_add_cast_18 <= resize(Sum_of_Elements_add_cast_17, 25);
  Sum_of_Elements_add_cast_19 <= resize(Unit_Delay2_out1(7), 25);
  Sum_of_Elements_add_temp_6 <= Sum_of_Elements_add_cast_18 + Sum_of_Elements_add_cast_19;
  
  Sum_of_Elements_add_cast_20 <= X"7FFFFF" WHEN (Sum_of_Elements_add_temp_6(24) = '0') AND (Sum_of_Elements_add_temp_6(23) /= '0') ELSE
      X"800000" WHEN (Sum_of_Elements_add_temp_6(24) = '1') AND (Sum_of_Elements_add_temp_6(23) /= '1') ELSE
      Sum_of_Elements_add_temp_6(23 DOWNTO 0);
  Sum_of_Elements_add_cast_21 <= resize(Sum_of_Elements_add_cast_20, 25);
  Sum_of_Elements_add_cast_22 <= resize(Unit_Delay2_out1(8), 25);
  Sum_of_Elements_add_temp_7 <= Sum_of_Elements_add_cast_21 + Sum_of_Elements_add_cast_22;
  
  Sum_of_Elements_cast <= X"7FFFFF" WHEN (Sum_of_Elements_add_temp_7(24) = '0') AND (Sum_of_Elements_add_temp_7(23) /= '0') ELSE
      X"800000" WHEN (Sum_of_Elements_add_temp_7(24) = '1') AND (Sum_of_Elements_add_temp_7(23) /= '1') ELSE
      Sum_of_Elements_add_temp_7(23 DOWNTO 0);
  
  Sum_of_Elements_out1 <= "11111111" WHEN (Sum_of_Elements_cast(23) = '0') AND (Sum_of_Elements_cast(22 DOWNTO 20) /= "000") ELSE
      "00000000" WHEN Sum_of_Elements_cast(23) = '1' ELSE
      unsigned(Sum_of_Elements_cast(19 DOWNTO 12));

  Unit_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay4_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay4_out1 <= Sum_of_Elements_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_process;


  CbIn_unsigned <= unsigned(CbIn);

  Unit_Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay10_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay10_reg(0) <= CbIn_unsigned;
        Unit_Delay10_reg(1 TO 2) <= Unit_Delay10_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Unit_Delay10_process;

  Unit_Delay10_out1 <= Unit_Delay10_reg(2);

  CbOut <= std_logic_vector(Unit_Delay10_out1);

  CrIn_unsigned <= unsigned(CrIn);

  Unit_Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay11_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay11_reg(0) <= CrIn_unsigned;
        Unit_Delay11_reg(1 TO 2) <= Unit_Delay11_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Unit_Delay11_process;

  Unit_Delay11_out1 <= Unit_Delay11_reg(2);

  CrOut <= std_logic_vector(Unit_Delay11_out1);

  ce_out <= clk_enable;

  YOut <= Delay_balance_out1;

END rtl;

